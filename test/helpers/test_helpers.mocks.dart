// Mocks generated by Mockito 5.0.10 from annotations
// in falcon106/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;
import 'dart:ui' as _i13;

import 'package:falcon106/core/enums/view_state.dart' as _i12;
import 'package:falcon106/core/models/product.dart' as _i6;
import 'package:falcon106/core/services/api.dart' as _i5;
import 'package:falcon106/core/viewmodels/cart_model.dart' as _i14;
import 'package:falcon106/core/viewmodels/product_list_model.dart' as _i11;
import 'package:http/src/base_request.dart' as _i10;
import 'package:http/src/client.dart' as _i4;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResponse extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse extends _i1.Fake implements _i3.StreamedResponse {}

class _FakeClient extends _i1.Fake implements _i4.Client {}

class _FakeAPI extends _i1.Fake implements _i5.API {}

class _FakeProduct extends _i1.Fake implements _i6.Product {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i7.Future<_i9.Uint8List>);
  @override
  _i7.Future<_i3.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse()))
          as _i7.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [API].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPI extends _i1.Mock implements _i5.API {
  @override
  _i4.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient()) as _i4.Client);
  @override
  set client(_i4.Client? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  _i7.Future<List<_i6.Product>> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
              returnValue: Future<List<_i6.Product>>.value(<_i6.Product>[]))
          as _i7.Future<List<_i6.Product>>);
}

/// A class which mocks [ProductListModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductListModel extends _i1.Mock implements _i11.ProductListModel {
  @override
  _i5.API get api =>
      (super.noSuchMethod(Invocation.getter(#api), returnValue: _FakeAPI())
          as _i5.API);
  @override
  set api(_i5.API? _api) => super.noSuchMethod(Invocation.setter(#api, _api),
      returnValueForMissingStub: null);
  @override
  List<_i6.Product> get products =>
      (super.noSuchMethod(Invocation.getter(#products),
          returnValue: <_i6.Product>[]) as List<_i6.Product>);
  @override
  _i12.ViewState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i12.ViewState.Idle) as _i12.ViewState);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i7.Future<dynamic> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  void applyState(_i12.ViewState? viewState) =>
      super.noSuchMethod(Invocation.method(#applyState, [viewState]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CartModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartModel extends _i1.Mock implements _i14.CartModel {
  @override
  List<_i6.Product> get cart => (super.noSuchMethod(Invocation.getter(#cart),
      returnValue: <_i6.Product>[]) as List<_i6.Product>);
  @override
  set cart(List<_i6.Product>? _cart) =>
      super.noSuchMethod(Invocation.setter(#cart, _cart),
          returnValueForMissingStub: null);
  @override
  Map<String, List<_i6.Product>> get cartSummary =>
      (super.noSuchMethod(Invocation.getter(#cartSummary),
              returnValue: <String, List<_i6.Product>>{})
          as Map<String, List<_i6.Product>>);
  @override
  set cartSummary(Map<String, List<_i6.Product>>? _cartSummary) =>
      super.noSuchMethod(Invocation.setter(#cartSummary, _cartSummary),
          returnValueForMissingStub: null);
  @override
  int get cartSize =>
      (super.noSuchMethod(Invocation.getter(#cartSize), returnValue: 0) as int);
  @override
  int get totalCost =>
      (super.noSuchMethod(Invocation.getter(#totalCost), returnValue: 0)
          as int);
  @override
  _i12.ViewState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i12.ViewState.Idle) as _i12.ViewState);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void addToCart(_i6.Product? product) =>
      super.noSuchMethod(Invocation.method(#addToCart, [product]),
          returnValueForMissingStub: null);
  @override
  List<_i6.Product> getCart() =>
      (super.noSuchMethod(Invocation.method(#getCart, []),
          returnValue: <_i6.Product>[]) as List<_i6.Product>);
  @override
  Map<String, List<_i6.Product>> getCartSummary() =>
      (super.noSuchMethod(Invocation.method(#getCartSummary, []),
              returnValue: <String, List<_i6.Product>>{})
          as Map<String, List<_i6.Product>>);
  @override
  _i6.Product getProduct(int? index) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [index]),
          returnValue: _FakeProduct()) as _i6.Product);
  @override
  int getProductQuantity(int? index) =>
      (super.noSuchMethod(Invocation.method(#getProductQuantity, [index]),
          returnValue: 0) as int);
  @override
  void clearCart() => super.noSuchMethod(Invocation.method(#clearCart, []),
      returnValueForMissingStub: null);
  @override
  void applyState(_i12.ViewState? viewState) =>
      super.noSuchMethod(Invocation.method(#applyState, [viewState]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
